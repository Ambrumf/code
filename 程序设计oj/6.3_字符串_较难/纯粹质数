问题描述 :

明明的爸爸是一位数学家，明明受他爸爸的影响从小就喜欢数学，经常向他爸爸请教数学问题。一天，明明问爸爸什么是素数，爸爸回答说：“首先，素数都是大于1的自然数；其次，素数是只能被1和其本身整除的数。例如‘3’这个数，它只能被1和3这两个整数整除，因此‘3’就是素数；但是‘4’就不是素数，因为4除了能被1和4整除外，也能被2整除，因此‘4’就不是一个素数。”

聪明的明明很快就理解了他爸爸的意思，于是又接着问他爸爸：“那么纯粹素数又是什么呢？”明明的爸爸接着回答说：“一个素数，去掉最高位，剩下的数仍为素数，再去掉剩下的数的最高位，余下的数还是素数，这样下去一直到最后剩下的个位数也还是素数，我们把这样的数称为纯粹素数。例如‘1013’这个数，它只能被1和1013整除，因此‘1013’是一个素数，我们去掉它的最高位，剩下的数是13（其实剩下的应该是013，但是前置0对一个整数来说没有意义，因此0被舍去，就剩下13），13只能被1和13整除，因此13也是个素数，我们再接着去掉它的最高位，剩下的个位数是3，3当然也是素数，因此‘1013’就是纯粹素数。更有趣的是，1013是第一个大于1000的纯粹素数，因为：

1000能被1、2、……、1000整除，其本身不是素数；

1001能被1、7、……、1001整除，其本身不是素数；

1002能被1、2、……、1000整除，其本身不是素数；

1003能被1、17、……、1003整除，其本身不是素数；

1004能被1、2、……、1004整除，其本身不是素数；

1005能被1、3、……、1005整除，其本身不是素数；

1006能被1、2、……、1006整除，其本身不是素数；

1007能被1、19、……、1007整除，其本身不是素数；

1008能被1、2、……、1008整除，其本身不是素数；

1009是一个素数，但是9能被1、3、9整除，不是素数；

1010能被1、2、……、1010整除，其本身不是素数；

1011能被1、3、……、1011整除，其本身不是素数；

1012能被1、2、……、1012整除，其本身不是素数；

所以从1000到1012，每个数都不是纯粹素数。”

明明对他爸爸的回答很满意，于是自己动手从1000开始寻找纯粹素数，不一会儿他就找到了20个纯粹素数，调皮的明明开始反过来考爸爸了，问他爸爸能否告诉他第2个大于1000的纯粹素数是哪个？第3个大于1000的纯粹素数是哪个？……明明的爸爸被这些突如其来的问题给难住了，他无法立刻回答出来，于是请求你帮助他回答明明的这些问题。

明明的问题可以归结为：跟据一个正整数n，求出从1,000开始从小到大的第n个纯粹素数。



输入说明 :

你写的程序需要从标准输入设备（通常为键盘）中读入多组测试数据，每组测试数据仅占一行，每行仅包括一个正整数n（1 ≤ n ≤ 20）。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。



输出说明 :

对于每一组测试数据，你写的程序需要计算出一组相应的运算结果，并将每组运算结果依次写入到标准输出设备（通常为启动该程序的文本终端，例如Windows中的命令行终端）中。每组运算结果为一个整数，即从1,000开始从小到大的第n个纯粹素数。。每组运算结果单独形成一行，其行首和行尾都没有任何空格，每组运算结果与其后一组运算结果之间没有任何空行，第一组运算结果前面以及最后一组运算结果后面也都没有任何空行。



输入范例 :

1
10
20
输出范例 :

1013
1607
2137

#include <bits/stdc++.h>
using namespace std;
set<int> fac;
int getlowerint(int n)
{
    deque<int> d;
    while (n)
    {
        d.push_front(n%10);
        n /= 10;
    }
    d.pop_front();
    int sum=0;
    while(!d.empty())
    {
        sum*=10;
        sum+=d.front();
        d.pop_front();
    }
    return sum;
}
bool ispurefac(int n)
{
    if(0<=n && n<=9){if(fac.find(n)!=fac.end())return 1;else return 0;}
    else if((fac.find(n)!=fac.end()) && ispurefac(getlowerint(n))) return 1;
    return 0;
}
int main()
{
    const int MAX = 20001;
    int a[MAX] = {0};
    vector<int> v;
    for (int i = 2; i < MAX; i++)
        a[i] = i;
    for (int i = 2; i < 220; i++)
    {
        if (a[i])
            for (int j = i + i; j < MAX; j += i)
                a[j] = 0;
    }
    for (auto x : a)
        if (x)
        {
            fac.insert(x);
            v.push_back(x);
        }
    int n, k = 0;
    int ans[20];
    for (int i = 169;; i++)
    {
        if (k == 20)
            break;
        if (ispurefac(v[i]))
        {
            ans[k] = v[i];
            k++;
        }


    }
            while (cin >> n)
        {
            cout << ans[n - 1] << endl;
        }
    return 0;
}