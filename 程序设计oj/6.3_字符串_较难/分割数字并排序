问题描述 :

输入一行数字，如果我们把这行数字中的‘5’都看成空格，那么就得到一行用空格分割的若干非负整数（可能有些整数以‘0’开头，这些头部的‘0’应该被忽略掉，除非这个整数就是由若干个‘0’组成的，这时这个整数就是0）。

你的任务是：对这些分割得到的整数，依从小到大的顺序排序输出。



输入说明 :

输入包含多组测试用例，第一行，测试案例个数，每组输入数据只有一行数字（数字之间没有空格），这行数字的长度不大于1000。  

输入数据保证：分割得到的非负整数不会大于100000000；输入数据不可能全由‘5’组成。



输出说明 :

对于每个测试用例，输出分割得到的整数排序的结果，相邻的两个整数之间用一个空格分开，每组输出占一行。



输入范例 :

2
0051231232050775
4000050005045453356356456454564567677686564654
输出范例 :

0 77 12312320
0 4 4 4 4 33 63 64 64 64 646 40000 67677686

#include <bits/stdc++.h>
using namespace std;
long long fun(string a)
{
    long long sum=0;
    while(!a.empty())
    {
        sum=sum*10+a.front()-48;
        a.erase(a.begin());
    }
    return sum;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        vector<long long> vec;
        string a;
        cin>>a;
        int pos=a.find("5");
        while(pos!=-1)
        {
            string tmp=a.substr(0,pos);
            while(tmp.front()=='0')
            {
                if(tmp.size()==1)break;
                tmp.erase(tmp.begin());
            }
            a.erase(0,pos+1);
            if(!tmp.empty())vec.push_back(fun(tmp));
            pos=a.find("5");
        }
        if(a.size()!=0)vec.push_back(fun(a));
        sort(vec.begin(),vec.end());
        for(int i=0;i<vec.size();i++){cout<<vec[i];if(i<vec.size()-1)cout<<' ';}
        cout<<endl;
    }
    return 0;
}