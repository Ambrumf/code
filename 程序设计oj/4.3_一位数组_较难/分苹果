问题描述 :

　　小朋友排成一排，老师给他们分苹果。
　　小朋友从左到右标号1..N。有M个老师，每次第i个老师会给第Li个到第Ri个，一共Ri-Li+1个小朋友每人发Ci个苹果。
　　最后老师想知道每个小朋友有多少苹果。

输入说明 :

　　第一行两个整数N、M，表示小朋友个数和老师个数。
　　接下来M行，每行三个整数Li、Ri、Ci，意义如题目表述。



      N、M≤100 000，1≤Li≤Ri≤N，0≤Ci≤100。

输出说明 :

　　一行N个数，第i个数表示第i个小朋友手上的水果。

输入范例 :

5 3
1 2 1
2 3 2
2 5 3
输出范例 :

1 6 5 3 3 

#include <iostream>  
#include <string.h>  
#include <algorithm>  
#include <cstdio>  
#include <math.h>  
#include <vector>
using namespace std;
const int N = 100000 + 10;
int useless(int nsd)
{
    int n, t;
    cin >> n;
    t = n;
    vector<string>vec1, vec2;
    while (t--) {
        string temp;
        cin >> temp;
        cin >> temp;
            vec1.push_back(temp);
        cin >> temp;
    }
    return 0;
}
struct Node {
    int l, r, v;
}node[N * 4];
void Init(int vsd, int le, int ri) {     
    if (le == ri) {
        node[vsd].l = le;
            node[vsd].r = ri;
        node[vsd].v = 0;
        return;
    }
    int mid = (le + ri) >> 1;
        int ne = vsd << 1;
    Init(ne, le, mid);
    Init(ne + 1, mid + 1, ri);
    
    
    
          node[vsd].l = le;
    node[vsd].r = ri;
    node[vsd].v = 0;
}
void insert(int vsd, int le, int ri, int add) {    
    if ((node[vsd].l == le)
        
        && node[vsd].r == ri) {

             node[vsd].v += add;
        return;
    }
    int tsd = (node[vsd].l + node[vsd].r) >> 1;
    int fy = vsd << 1;
   


    if (ri <= tsd) {
        insert(fy, le, ri, add);
    }
    else if (le > tsd) {
        insert(fy + 1, le, ri, add);
    }
       



    else
    {
        insert(fy, le, tsd, add);
        insert(fy + 1, tsd + 1, ri, add);
    }
}
void print(int vsd) {
    if (node[vsd].l == node[vsd].r) {
        cout <<  node[vsd].v << " "  ;
        return;
    }
        int fs = vsd << 1;
   node[fs].v += node[vsd].v;
        print(fs);
    node[fs + 1].v += node[vsd].v;
    print(fs + 1);
}
int main() {
    int ns, md, i, a1, b2, c3;
    while (cin >> ns >> md) {
        Init(1, 1, ns);
        for (i = 0; i < md; i++) {
            cin >> a1 >> b2 >> c3;
            insert(1, a1, b2, c3);
        }
        print(1);
        cout << endl;
    }
    return 0;
}