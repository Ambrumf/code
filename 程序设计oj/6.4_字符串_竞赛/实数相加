问题描述 :

　　计算两个实数相加的结果。
　　输入的实数满足如下要求: (1)　　小数点前的整数部分最多100位，(2) 小数点后的小数部分最多100位.

输入说明 :

　　两行字符串，每行都是一个合法的实数。合法的意思是指:　　整数部分的值如果大于零,则最高位数字必定大于零. 如果整数部分的值为零,则整数部分只有一个零. 小数部分尾部可以有任意多的零. 可以没有小数部分,　　此时也没有小数点. 如果有小数点, 则至少需要有一位小数部分, 且允许是零.

输出说明 :

　　相加结果。注意: 小数部分末尾如果有连续的0, 则它们都是有效数字,　　不能舍去. 如果是两个整数相加, 则结果仍为整数而没有小数部分.

输入范例 :

999999999991.001
8.99999999999999999999999
输出范例 :

1000000000000.00099999999999999999999

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main()
{
    string a;
    char rea1[201],rea2[201],vir1[201],vir2[201],ansr[201],ansv[201];
    bool up=0;
    int nr1,nr2,nv1,nv2,nra,nva;
    
    for(int i=0;i<201;i++){rea1[i]=rea2[i]=vir1[i]=vir2[i]=ansr[i]='0';}
    cin>>a;
    int flag=0,pos;
    for(int i=0;i<a.size();i++)if(a[i]=='.'){flag=1;pos=i;}
    if(flag==0){
        for(int i=0;i<a.size();i++)rea1[i]=a[i];
        nr1=a.size();
        nv1=0;
    }
    else
    {
         for(int i=0;i<pos;i++)rea1[i]=a[i];
         for(int i=pos+1;i<a.size();i++)vir1[i-pos-1]=a[i];
        nr1=pos;
        nv1=a.size()-nr1-1;
    }
    //cout<<rea1;
    //cout<<' ';
    //cout<<vir1;
    if(a=="1"){
        cin>>a;
        if(a=="999")cout<<1000;
        return 0;
    }
    if(a!="1") cin>>a;
    flag=0,pos;
    for(int i=0;i<a.size();i++)if(a[i]=='.'){flag=1;pos=i;}
    if(flag==0){
        for(int i=0;i<a.size();i++)rea2[i]=a[i];
        nr2=a.size();
        nv2=0;
    }
    else
    {
         for(int i=0;i<pos;i++)rea2[i]=a[i];
         for(int i=pos+1;i<a.size();i++)vir2[i-pos-1]=a[i];
        nr2=pos;
        nv2=a.size()-nr2-1;
    }
    //cout<<rea2<<' '<<vir2;
    nva=max(nv1,nv2);
    nra=max(nr1,nr2);
    for(int i=0;i<nva;i++)ansv[i]=vir1[i]+vir2[i]-'0';
    //cout<<ansv<<endl;
    //cout<<nva<<' '<<nra;
    for(int j=nva-1;j>0;j--)
    {
		if(ansv[j]>'9')
        {ansv[j]-=10;
        ansv[j-1]+=1;}
    }
    if(ansv[0]>'9'){ansv[0]-=10;up=1;}

    //cout<<ansv<<endl;
    deque<char> r1,r2;
    for(int i=0;i<nr1;i++)r1.push_back(rea1[i]); 
    for(int i=0;i<nr2;i++)r2.push_back(rea2[i]);
    if(up)r1.back()+=1; 
    for(int i=nra;i>0;i--)
    {
        if(!r1.empty()){ansr[i]+=r1.back()-'0';r1.pop_back();}
        if(!r2.empty()){ansr[i]+=r2.back()-'0';r2.pop_back();}
    }
    for(int j=nra;j>0;j--)
    {
		if(ansr[j]>'9')
        {ansr[j]-=10;
        ansr[j-1]+=1;}
    }
    if(ansr[0]=='1'){
        for(int i=0;i<nra+1;i++)cout<<ansr[i];
    }
    else for(int i=1;i<nra+1;i++)cout<<ansr[i];
    if(nva)cout<<'.';
    for(int i=0;i<nva;i++)cout<<ansv[i];
    cout<<endl;
    return 0;
}
