问题描述 :

现在有很多长方形，每个长方形有自己的编号，这个编号可以重复。每个长方形的长、宽、编号都是正整数。现在要求按照以下方式排序（所有排序规则是从小到大）：

1.     按照编号从小到大排序；

2.     对于编号相等的长方形，按照长方形的长从小到大排序；

3.     对于编号和长都相同的长方形，按照长方形的宽从小到大排序；

4.     如果编号、长和宽都相同，就只保留一个长方形用于排序，删除多余的长方形。最后将排好序的长方形按照指定格式输出。






输入说明 :

1.     第一行有一个整数n，0 < n < 10000，表示接下来有n组测试数据；

2.     每一组第一行有一个整数m，0 < m < 1000，表示有m个长方形；

3.     接下来的m行，每一行有三个数，每个数用空格分隔，第一个数表示长方形的编号，第二个和第三个数值大的表示长方形的长、数值小的表示长方形的宽，相等说明这是一个正方形。

4.     长、宽和编号都小于10000。



输出说明 :

对每组输入数据输出按要求排好序的长方形的编号、长、宽。编号、长、宽用空格分隔，每个长方形的编号、长、宽占一行。n组测试数据的输出结果之间空一行。



输入范例 :

2
8
1 1 1
1 1 1
1 1 2
1 2 1
1 2 2
2 1 1
2 1 2
2 2 1
3
9 1 5
9 5 1
1 5 1

输出范例 :

1 1 1
1 2 1
1 2 2
2 1 1
2 2 1

1 5 1
9 5 1

#include <bits/stdc++.h>
using namespace std;
struct rectangle
{
    int num;
    int lenth;
    int width;
};
bool operator==(const rectangle& a,const rectangle &b)
{
    if(a.lenth==b.lenth && a.num==b.num && a.width==b.width)return 1;
    return 0;
}
bool cmp(rectangle a,rectangle b)
{
    if(a.num!=b.num)return a.num<b.num;
    else if(a.lenth!=b.lenth)return a.lenth<b.lenth;
    else return a.width<b.width;
    
}
int main()
{
    int n;
    scanf("%d",&n);
    while(n--)
    {
        int m;
        vector<rectangle> v;
        cin>>m;
        while(m--)
        {
            int a,b,c;

            scanf("%d%d%d",&a,&b,&c);
            if(b<c)swap(b,c);
            rectangle tmp={a,b,c};
            v.push_back(tmp);
        }
        sort(v.begin(),v.end(),cmp);
        auto it=unique(v.begin(),v.end());
        v.erase(it,v.end());
        for(auto x:v)printf("%d %d %d\n",x.num,x.lenth,x.width);
        cout<<endl;
    }
    return 0;
}
