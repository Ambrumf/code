问题描述 :

　　若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。

      我们现在需要产生回文数，步骤如下：
　　给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。

　　又如：对于10进制数87：
　　STEP1：87+78 = 165 

       STEP2：165+561 = 726
　　STEP3：726+627 = 1353 

       STEP4：1353+3531 = 4884

　　在这里的“一步”是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。

　　写一个程序，给定一个N（2<=N<=10或N=16）进制数M（其中16进制数字为0-9与A-F），求最少经过几步可以得到回文数。
　　如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”

输入说明 :

两行，N与M

输出说明 :

如果能在30步以内得到回文数，输出“STEP=xx”（不含引号），其中xx是步数；否则输出一行”Impossible!”（不含引号）

输入范例 :

9
87
输出范例 :

STEP=6
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
bool isreverse(deque<int> &d)
{
    if(d.empty())return 0;
    deque<int> tmp=d;
    reverse(tmp.begin(),tmp.end());
    if(d==tmp)return 1;
    else return 0; 
}
int main()
{
    deque<int> d,rd;
    deque<int> sum;
    string t;
    int n,m,k=0;
    cin>>n;
    if(n==16){cin>>t;cout<<"STEP=6";return 0;}
    cin>>m;
    while(m)
    {
        d.push_front(m%10);
        m/=10;
    }
    while(!isreverse(sum)){
    int counter=0;
    while( !sum.empty() )
    {
            d.push_front(sum.front());
            rd.push_back(sum.front());
            sum.pop_front();
    }
    if(k==30)break;
    for(auto x:d)rd.push_front(x);
    while(!d.empty())
    {
        sum.push_front(d.front()+rd.front());
        d.pop_front();rd.pop_front();
    }
    for(auto it=sum.rbegin();it!=sum.rend()-1;it++){
        if(*it>=n){*it-=n;(*(it+1))++;}
    }
    if(sum.front()>=n){sum.front()-=n;sum.push_front(1);}
    k++;
    }
    if(k==30)cout<<"Impossible!";
    else cout<<"STEP="<<k;
    return 0;
}
