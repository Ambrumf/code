问题描述 :

N的阶乘写作N!表示小于等于N的所有正整数的乘积。阶乘会很快的变大，如13!就必须用32位整数类型来存储，70！即使用浮点数也存不下了。你的任务是找到阶乘最后面的非零位。举个例子,5!=1*2*3*4*5=120所以5!的最后面的非零位是2，7！=1*2*3*4*5*6*7=5040，所以最后面的非零位是4。

输入说明 :

一个不大于1000的整数N。

输出说明 :

共一行，输出N!最后面的非零位。

输入范例 :

7
输出范例 :

4

#include<iostream>
#include<cstdio>
#include<iomanip>
#include<cmath>
#include<locale.h>
using namespace std;
int main ()
{
    int N,t,a[1001],m=0,n=0;
    cin>>N;
    for(int i=1;i<1001;i++)a[i]=i;
    for(int i=5;i<1001;i=i*5)//除去5因子
        for(int j=i;j<1001;j+=i){a[j]/=5;}
    for(int i=2;i<1001;i=i*2)//除去2因子
        for(int j=i;j<1001;j+=i){a[j]/=2;}
    for(int i=2;i<N+1;i*=2)n+=N/i;
    for(int i=5;i<N+1;i*=5)m+=N/i;
    switch ((n-m)%4)
    {
        case 0: n=6;break;
        case 1: n=2;break;
        case 2: n=4;break;
        case 3: n=8;break;
    }

    t=1;
    for(int i=1;i<N+1;i++)
    {
        t*=a[i];
        t%=10;
    }
    t=t*n%10;
    cout<<t<<endl;
    return 0;
}
