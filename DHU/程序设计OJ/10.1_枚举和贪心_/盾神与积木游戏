问题描述 :

　　最近的m天盾神都去幼儿园陪小朋友们玩去了~
　　每个小朋友都拿到了一些积木，他们各自需要不同数量的积木来拼一些他们想要的东西。但是有的小朋友拿得多，有的小朋友拿得少，有些小朋友需要拿到其他小朋友的积木才能完成他的大作。如果某个小朋友完成了他的作品，那么他就会把自己的作品推倒，而无私地把他的所有积木都奉献出来；但是，如果他还没有完成自己的作品，他是不会把积木让出去的哟~
　　盾神看到这么和谐的小朋友们感到非常开心，于是想帮助他们所有人都完成他们各自的作品。盾神现在在想，这个理想有没有可能实现呢？于是把这个问题交给了他最信赖的你。

输入说明 :

　　第一行为一个数m。
　　接下来有m组数据。每一组的第一行为n，表示这天有n个小朋友。接下来的n行每行两个数，分别表示他现在拥有的积木数和他一共需要的积木数。

　　1<=n<=10000，1<=m<=10。

输出说明 :

　　输出m行，如果第i天能顺利完成所有作品，输出YES，否则输出NO。

输入范例 :

2
2
2 2
1 3
3
1 5
3 3
0 4
输出范例 :

YES
NO

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int main()
{
    ll m,n;
    cin>>m;
    while(m--)
    {
        vector<pair<ll,ll> > v;
        cin>>n;
        ll cube;
        while(n--){
            ll a,b;
            cin>>a>>b;
            v.push_back(make_pair(a,b));
        }
        int flag=0;
        for(int i=0;i<v.size();i++){if(v[i].first>=v[i].second){cube=v[i].first;v.erase(v.begin()+i);flag=1;break;}}
        //cout<<endl<<v.size()<<' '<<cube<<endl;
        if(!flag){cout<<"NO"<<endl;continue;}
        while(!v.empty())
        {
            if(flag==0)break;
            flag=0;
            for(auto it=v.begin();it<v.end();it++)
            {
                if(it->first+cube>=it->second){cube+=it->first;it=v.erase(it)-1;flag=1;}
            }
        } 
        if(v.empty())cout<<"YES";
        else cout<<"NO";
        cout<<endl;  
    }
    return 0;
}
