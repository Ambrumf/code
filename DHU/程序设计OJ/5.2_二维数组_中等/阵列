问题描述 :

明明在上学的时候，参加数学兴趣班。在班上，老师介绍了一种非常有趣的阵列。

该阵列由n个正整数构成，阵列中的数字从1开始递增，数字的排序规则是从1开始由中间逆时针向外转出，2出现在1的下面，然后直至输出n为止。

例如当n=5的时候，阵列如下：  

  5

1 4

2 3

当n=9时，阵列如下：

7 6 5

8 1 4

9 2 3

当n=10时，阵列如下：

  7 6 5

  8 1 4

  9 2 3

10

明明回家后想自己动手构造这样的阵列。他从n=1开始构造，但是他发现当n越来越大时，阵列的复杂性就越高，然后构造出来的阵列就越容易出错。为了降低构造阵列的出错率，提高构造速度，明明就求助于你，请你帮他写一个程序，来构造这样的阵列。

明明的问题可以归结为：给你一个正整数n，请你按题目描述中所述的方法，构造出阵列。

输入说明 :

你写的程序要求从标准输入设备中读入测试数据作为你所写程序的输入数据。标准输入设备中有多组测试数据，每组测试数据仅占一行，每行仅有一个正整数n（1≤n≤99），即所要构造的阵列的大小。每组测试数据与其后一组测试数据之间没有任何空行，第一组测试数据前面以及最后一组测试数据后面也都没有任何空行。

输出说明 :

对于每一组测试数据，你写的程序要求计算出一组相应的运算结果，并将这一组运算结果作为你所写程序的输出数据依次写入到标准输出设备中。每组运算结果为一个大小为n的阵列，阵列中的数字用一个空格隔开，具体形式请参考输出样例： 当n为个位数时，输出的每个数占1位，当n为两位数时，两位数所在的列输出的每个数占2位(不足2位的左边补空格)。 每组运算结果与其后一组运算结果之间有一个空行，最后一组运算结果之后没有任何空行。 注：通常，显示屏为标准输出设备。

输入范例 :

5
45
10

输出范例 :

  5
1 4
2 3

43 42 41 40 39 38 37
44 21 20 19 18 17 36
45 22  7  6  5 16 35
   23  8  1  4 15 34
   24  9  2  3 14 33
   25 10 11 12 13 32
   26 27 28 29 30 31

 7 6 5
 8 1 4
 9 2 3
10

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int list[101][101];
    int cir, line, k, row = 51, col = 50;
    k = 2;
    line = 2;
    ;
    cir = 1;
    list[50][50] = 1;
    while (cir <= 50)
    {
        int time = 4;
        int spin = 0;
        while (time--)
        { //赋值一圈
            if (spin % 4 == 0)
                for (int i = 0; i < line; i++) //每行赋值(右)
                {
                    if (i != line - 1)
                    {
                        list[row][col] = k;
                        col++;
                    }
                    else
                    {
                        list[row][col] = k;
                        row--;
                    }
                    k++;
                }
            if (spin % 4 == 1)
                for (int i = 0; i < line; i++) //每列赋值（上）
                {
                    if (i != line - 1)
                    {
                        list[row][col] = k;
                        row--;
                    }
                    else
                    {
                        list[row][col] = k;
                        col--;
                    }
                    k++;
                }
            if (spin % 4 == 2)
                for (int i = 0; i < line; i++) //每行赋值（左）
                {
                    if (i != line - 1)
                    {
                        list[row][col] = k;
                        col--;
                    }
                    else
                    {
                        list[row][col] = k;
                        row++;
                    }
                    k++;
                }
            if (spin % 4 == 3)
                for (int i = 0; i < line; i++) //每列赋值（下）
                {
                    list[row][col] = k;
                    row++;
                    k++;
                }
            spin++;
        }
        cir++;
        line += 2;
    }
    int n,flag=0;
    while (cin >> n)
    {
        int trigger;
        if(n==10)trigger=1;
        if(n==11)trigger=2;
        if(flag)cout<<endl;
        if(n==1){cout<<1<<endl;continue;}
        int len = 1;
        int t = n;
        while (t /= 10)
        {
            len++;
        }
        int p = 0;
        while (!((2 * p - 1) * (2 * p - 1) >= n && (2 * p - 3) * (2 * p - 3) < n))
            p++;
        if (n < (2 * p - 1) * (2 * p - 1) - 6*p + 7)
        {
            for (int i = 52-p ; i <= 49 + p; i++)
            {
                for (int j = 52 - p; j <= 48 + p; j++)
                {
                    if(n==10)if(j==50|| j ==51)len=1;
                    if(n==11)if(j==51 )len=1;
                    if (list[i][j] < n)
                        cout <<setw(len)<< list[i][j] ;
                    if (list[i][j] == n)
                        cout<<setw(len)<< list[i][j];
                    if((j<48+p && i!=49+p) || (i==49+p && list[i][j]<n))cout<<' ';
                    if(n<=9)len=1;
                    else len=2;
                }
                cout << endl;
            }
        }
        else if (n < (2 * p - 1) * (2 * p - 1) - 4*p + 4)
        {
            for (int i = 52-p ; i <= 49 + p; i++)
            {
                for (int j = 52 - p; j <= 49 + p; j++)
                {
                    if (list[i][j] <= n)
                        cout<<setw(len) << list[i][j] ;
                    if((j<49+p && i!=52-p) || (i==52-p && j<48+p))cout<<' ';
                }
                cout << endl;
            }
        }
        else if (n < (2 * p - 1) * (2 * p - 1) - 2*p + 2)
        {
            for (int i = 51 - p; i <= 49 + p; i++)
            {
                for (int j = 52 - p; j <= 49 + p; j++)
                {
                    if (list[i][j] <= n)
                        cout <<setw(len)<< list[i][j] ;
                        else cout<<setw(len)<<' ';
                    if(j<49+p )cout<<' ';
                }
                cout << endl;
            }
        }
        else
        {
            for (int i = 51 - p; i <= 49 + p; i++)
            {
                for (int j = 51 - p; j <= 49 + p; j++)
                {
                    if (list[i][j] <= n)
                        cout <<setw(len)<< list[i][j] ;
                    else cout << setw(len) <<' ';
                    if(j<49+p)cout<<' ';
                }
                cout << endl;
            }
        }
        flag=1;
    }
    return 0;
}