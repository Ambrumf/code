问题描述 :

农民乔以拥有世界上最健康的奶牛为骄傲。他知道每种饲料中所包含的维他命量是多少。

请你帮助乔喂养他的牛，使得奶牛能摄取足够的维他命，并且喂给牛的饲料的种数最少。

输入将给出牛所需的最低的维他命的数量，请输出需要喂给牛哪些种类的饲料，并且饲料种类数最少。

输入说明 :

第1行：一个整数V(1<=V<=25)，表示奶牛需要的维他命的种类数。

第2行：V个整数(1<=每个数<=1000)，表示牛每天需要的每种维他命的最小量。第1个数字表示第1种维他命的量，第n个数字表示第n种维他命的量。

第3行：一个整数G(1<=G<=15)，表示可用来喂牛的饲料的数量。

下面G行，第i行表示编号为i的饲料中，包含V种维他命的量各为多少。该行包含V个数字，第n个数字表示第n种维他命的量。

输出说明 :

输出只有一行，包括： 牛必需的最小的饲料种数P，后面有P个数，表示所选择的饲料编号（按从小到大排列）。数字之间以一个空格分隔。

如果有多种可能的答案，则输出饲料编号字典序最小的：逐一比较对应的数字，找出较小的那个。

比如：饲料编号1 2 4及 1 3 4，这两者中1 2 4较小，因此输出1 2 4.

再比如：饲料编号1 2 4及 1 2 14，这两者中1 2 4较小（因为4比14小），因此输出1 2 4.

输入范例 :

4
 100 200 300 400
 3
 50 50 50 50
 200 300 200 300
 900 150 389 399
输出范例 :

2 1 3


#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int flag = 0;
int V, vv[26] = {}, G, gg[16][26] = {}, ans[16] = {}, N;
void combination(int k, int pos, int n)
{
    if(!flag)ans[pos] = k;
    if (pos == n-1)
    {
        int vflag = 0;
        int sum[26] = {};
        for (int i = 0; i < n; i++)
            for (int j = 0; j < V; j++)
                sum[j] += gg[ans[i]][j];
        for (int i = 0; i < V; i++)
            if (sum[i] < vv[i])
            {
                vflag = 1;
                return;
            }
        flag = 1;
        N = n;
    }
    for (int i = k+1; i < G; i++)
        if (!flag)
            combination(i, pos+1, n);
}
int main()
{
    cin >> V;
    for (int i = 0; i < V; i++)
        cin >> vv[i];
    cin >> G;
    for (int i = 0; i < G; i++)
        for (int j = 0; j < V; j++)
            cin >> gg[i][j];
    int i;
    for (i = 1; i < G+1 ; i++)
{     if (!flag)for(int l=0;l<16;l++)ans[l]=0;
        if (!flag)for(int j=0;j<G;j++)combination(j, 0, i);}
    cout << N <<' ';
    for (int i = 0; i < N; i++)
    {
        cout << ans[i]+1;
        if (i < N - 1)
            cout << ' ';
    }
    return 0;
}
