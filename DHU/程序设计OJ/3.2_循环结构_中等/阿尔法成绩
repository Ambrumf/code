问题描述 :

　　计算一个整数的阿尔法乘积。对于一个整数x来说，它的阿尔法乘积是这样来计算的：如果x是一个个位数，那么它的阿尔法乘积就是它本身；否则的话，x的阿尔法乘积就等于它的各位非0的数字相乘所得到的那个整数的阿尔法乘积。例如：4018224312的阿尔法乘积等于8，它是按照以下的步骤来计算的：
　　4018224312 → 4*1*8*2*2*4*3*1*2 → 3072 → 3*7*2 → 42 → 4*2 → 8
　　编写一个程序，输入一个正整数（该整数不会超过6,000,000,000），输出它的阿尔法乘积。

输入说明 :

输入只有一行，即一个正整数。

输出说明 :

输出相应的阿尔法乘积。

输入范例 :

4018224312
输出范例 :

8

#include <iostream>
#include <iomanip>#include <string>
#include <stdio.h>
using namespace std;

int main()
{
    char ch[11],a[11];
    int n=0;
    for (int j=0;j<11;j++) ch[j]='1';
    cin>>ch;
    n=ch[0]-48;
    for (int i=1;i<11;i++) if(ch[i]>='1' && ch[i]<='9') n*=ch[i]-48;
    for (int j=0;j<11;j++) ch[j]='1';
    snprintf(ch,11,"%d",n);
    while(n>9)
    {
         n=ch[0]-48;
         for (int i=1;i<11;i++) if(ch[i]>='1' && ch[i]<='9') n*=ch[i]-48;
         for (int j=0;j<11;j++) ch[j]='1';
         snprintf(ch,11,"%d",n);
    }
    cout<<n;
    return 0;
}
